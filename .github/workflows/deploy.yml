name: Deploy to Server

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Remove old host key
        run: |
          ssh-keygen -f "/home/runner/.ssh/known_hosts" -R "159.65.57.20"
         
      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          ssh ${{ secrets.NAME }}@${{ secrets.HOST }} "cd ~/proj-dir/SpringVaadinTestApp && git pull origin master && docker-compose up --build -d"




#
#  deploy:
#    needs: test
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Install Ruby and gems
#        uses: ruby/setup-ruby@ee2113536afb7f793eed4ce60e8d3b26db912da4 # v1.127.0
#        with:
#          bundler-cache: true
#      - name: Run command on remote server
#        uses: D3rHase/ssh-command-action@v0.2.2
#        with:
#          host: ${{secrets.SSH_HOST}}
#          user: ${{secrets.SSH_USER}}
#          private_key: ${{secrets.SSH_PRIVATE_KEY}}
#          command: |
#            cd ${{ secrets.PROJECT_FOLDER }};
#            git checkout main;
#            git pull;
#            docker-compose --file docker-compose.prod.yml down;
#            docker-compose --file docker-compose.prod.yml up -d;
#            docker system prune --all --force;


#On your server:
#
#  Create a new user or use your own
#  Check that user has access to the directory containing the repository (if the repository does not yet exist on the server, clone it into the directory you want)
#Create an SSH key:
#  ssh-keygen -t rsa -b 4096
#Add the public key to the authorized_keys file:
#  cat <path/to/public/key> >> ~/.ssh/authorized_keys
#Copy content of the key file:
#  cat <path/to/private/key>
#  You need to paste it in the next step.
